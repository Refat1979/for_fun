{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/refatmassoud/simple-cashier-program?scriptVersionId=190008635\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-27T14:33:28.013245Z","iopub.execute_input":"2024-07-27T14:33:28.013602Z","iopub.status.idle":"2024-07-27T14:33:28.020193Z","shell.execute_reply.started":"2024-07-27T14:33:28.013575Z","shell.execute_reply":"2024-07-27T14:33:28.018996Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"Simple Cashier Program","metadata":{}},{"cell_type":"code","source":"# Enter products function\ndef enterProducts():\n    buyingData ={}\n    enterDetails = True\n    while enterDetails:\n        details= input('Press A to add product and Q to quit:')\n        if details == 'A':\n            product = input('Enter product:')\n            quantity = int(input('Enter Quantity:'))\n            buyingData.update({product:quantity})\n        elif details == 'Q':\n            enterDetails = False\n        else:\n            print('Please select a correct option')\n    return buyingData\n        ","metadata":{"execution":{"iopub.status.busy":"2024-07-27T14:33:28.022028Z","iopub.execute_input":"2024-07-27T14:33:28.022357Z","iopub.status.idle":"2024-07-27T14:33:28.032201Z","shell.execute_reply.started":"2024-07-27T14:33:28.02233Z","shell.execute_reply":"2024-07-27T14:33:28.03114Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# get the price\n\ndef getPrice (product, quantity):\n    priceData = {\n        'Biscut':3,\n        'Chicken':5,\n        'Egg':1,\n        'Fish':3,\n        'Coke':2,\n        'Bread':2,\n        'Apple':3,\n        'Onion':3\n    }\n    subtotal= priceData[product]* quantity\n    print (product + ':$' +\n          str(priceData[product])+'x'+ \n           str(quantity)+ '=' + str(subtotal))\n    return subtotal\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T14:33:28.034122Z","iopub.execute_input":"2024-07-27T14:33:28.034461Z","iopub.status.idle":"2024-07-27T14:33:28.043913Z","shell.execute_reply.started":"2024-07-27T14:33:28.034419Z","shell.execute_reply":"2024-07-27T14:33:28.042834Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# getting discount according to membership level\n\ndef getDiscount (billAmount, membership):\n    discount = 0 \n    if billAmount >= 25:\n        if membership == 'Gold':\n            billAmount = billAmount * 0.80\n            discount = 20 \n        elif membership == 'Silver':\n            billAmount = billAmount * 0.90\n            discount = 10\n        elif membership == 'Bronze':\n            billAmount = billAmount * 0.95\n            discount = 5\n        print (str(discount)+ '% off for'+\n              membership +\n              ''+ 'membership on total amount: $' + \n              str(billAmount))\n    else:\n        print ('No discount on amount less than 25 $')\n            \n    return billAmount","metadata":{"execution":{"iopub.status.busy":"2024-07-27T14:33:28.045494Z","iopub.execute_input":"2024-07-27T14:33:28.046121Z","iopub.status.idle":"2024-07-27T14:33:28.058873Z","shell.execute_reply.started":"2024-07-27T14:33:28.046082Z","shell.execute_reply":"2024-07-27T14:33:28.057937Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# making the bill\n\ndef makeBill(buyingData, membership):\n    billAmount=0\n    for k,v in buyingData.items():\n        billAmount+= getPrice(k,v)\n    billAmount = getDiscount(billAmount, membership)\n    print('The discounted amount is $:' + str(billAmount))\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-27T14:33:28.061124Z","iopub.execute_input":"2024-07-27T14:33:28.06146Z","iopub.status.idle":"2024-07-27T14:33:28.071095Z","shell.execute_reply.started":"2024-07-27T14:33:28.061425Z","shell.execute_reply":"2024-07-27T14:33:28.070029Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"buyingData = enterProducts()\nmembership= input('Enter customer membership:')\nmakeBill(buyingData,membership) ","metadata":{"execution":{"iopub.status.busy":"2024-07-27T14:34:52.649642Z","iopub.execute_input":"2024-07-27T14:34:52.650027Z","iopub.status.idle":"2024-07-27T14:35:22.967937Z","shell.execute_reply.started":"2024-07-27T14:34:52.649997Z","shell.execute_reply":"2024-07-27T14:35:22.966947Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdin","text":"Press A to add product and Q to quit: A\nEnter product: Egg\nEnter Quantity: 30\nPress A to add product and Q to quit: A\nEnter product: Apple\nEnter Quantity: 5\nPress A to add product and Q to quit: A\nEnter product: Bread\nEnter Quantity: 5\nPress A to add product and Q to quit: Q\nEnter customer membership: Gold\n"},{"name":"stdout","text":"Egg:$1x30=30\nApple:$3x5=15\nBread:$2x5=10\n20% off forGoldmembership on total amount: $44.0\nThe discounted amount is $:44.0\n","output_type":"stream"}]}]}
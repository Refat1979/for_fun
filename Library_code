{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9052056,"sourceType":"datasetVersion","datasetId":5457932}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/refatmassoud/library-code?scriptVersionId=190152254\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"**Creat a library managgment application which will fetch all the available books in the library , adding new books, keep track of borrowed books and update details based on the books reuturened**","metadata":{}},{"cell_type":"markdown","source":"*Training of using OOP and the concept of reusability* ","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-28T13:16:48.033327Z","iopub.execute_input":"2024-07-28T13:16:48.03457Z","iopub.status.idle":"2024-07-28T13:16:48.044231Z","shell.execute_reply.started":"2024-07-28T13:16:48.03453Z","shell.execute_reply":"2024-07-28T13:16:48.042917Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"/kaggle/input/library/python.txt\n","output_type":"stream"}]},{"cell_type":"code","source":"# Creat a Library Class\nclass Library:\n    def __init__ (self,booklist,name):\n        #name is the library name\n        self.bookslist = booklist\n        self.name=name\n        self.lendDict={}\n    def displayBooks(self):\n        print(f'We have the following books in our library: {self.name}')\n        for book in self.bookslist:\n            print(book)\n    def lendBook (self,book,user):\n        if book in bookslist:\n            if book not in self.lendDict.keys():\n                self.lendDict.update({book:user})\n                print ('Book has been lended. Database updated')\n            else:\n                print(f'Book is already being used by {self.lendDict[Book]}')\n        else:\n            print('Apologies! we do not have this book in our library')\n    def addBook (self, book):\n        if book in bookslist:\n            print('Book already exists')\n        else:\n            self.bookslist.append(book)\n            bookDatabase = open(databaseName,'a')\n            bookDatabase.write('\\n')\n            bookDatabase.write(book)\n            print('Book added')\n    def returnBook (self,book):\n        if book in self.lendDict.keys():\n            self.lendDict.pop(book)\n            print('Book Returned Successfully')\n        else:\n            print ('The book does not exist in the Book Lending Database')\n\n###library Class and methods ends","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:16:48.046757Z","iopub.execute_input":"2024-07-28T13:16:48.047162Z","iopub.status.idle":"2024-07-28T13:16:48.062576Z","shell.execute_reply.started":"2024-07-28T13:16:48.04713Z","shell.execute_reply":"2024-07-28T13:16:48.061247Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":"*code excution will begin from here using the __name__ condition *","metadata":{}},{"cell_type":"markdown","source":"*Main Function - accepting user input*","metadata":{}},{"cell_type":"code","source":"def main():\n    while (True):\n        print(\n        f'Welcome to the {library.name} library. Follwing are the options: ')\n        choice = '''\n        1. Display Books\n        2. Lend a Book\n        3. Add a Book\n        4. Return a Book\n        '''\n        print (choice)\n        userInput= input ('Press Q to quit and C to continue:')\n        if userInput=='C':\n            userChoice = int(input('Select an option to continue:'))\n            if userChoice == 1:\n                library.displayBooks()\n            elif userChoice == 2:\n                book = input('Enter the name of the book you want to lend:')\n                user = input ('Enter the name of the user:')\n                library.lendBook(book,user)\n            elif userChoice == 3:\n                book = input ('Enter the name of the book you want to add:')\n                library.addBook(book)\n            elif userChoice == 4:\n                book = input('Enter the name of the book you want to return:')\n                library.returnBook(book)\n            else:\n                print('Please choose a valid option')\n        elif userInput =='Q':\n            break\n        else:\n            print ('please enter a valid option')\n### main function -accepting user input ends\n\n        \n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:16:48.063879Z","iopub.execute_input":"2024-07-28T13:16:48.06437Z","iopub.status.idle":"2024-07-28T13:16:48.084921Z","shell.execute_reply.started":"2024-07-28T13:16:48.064329Z","shell.execute_reply":"2024-07-28T13:16:48.083415Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"if __name__ == '__main__':\n    bookslist=[]\n    databaseName= input('Enter the name of the database file with extension:')\n    bookDatabase = open(databaseName,'r')\n    for book in bookDatabase:\n        bookslists.append(book)\n        library = Library(bookslist,'python')\n        main() #Jumps to the main function to accept iser input \n        ","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:16:48.087456Z","iopub.execute_input":"2024-07-28T13:16:48.087885Z","iopub.status.idle":"2024-07-28T13:16:55.223444Z","shell.execute_reply.started":"2024-07-28T13:16:48.087851Z","shell.execute_reply":"2024-07-28T13:16:55.221664Z"},"trusted":true},"execution_count":34,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[34], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m      2\u001b[0m     bookslist\u001b[38;5;241m=\u001b[39m[]\n\u001b[0;32m----> 3\u001b[0m     databaseName\u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mEnter the name of the database file with extension:\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m     bookDatabase \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(databaseName,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      5\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m book \u001b[38;5;129;01min\u001b[39;00m bookDatabase:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/ipykernel/kernelbase.py:1262\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1260\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1261\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(msg)\n\u001b[0;32m-> 1262\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1263\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1264\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1265\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1266\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1267\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/ipykernel/kernelbase.py:1305\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1302\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1303\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m   1304\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1305\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1306\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1307\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"],"ename":"KeyboardInterrupt","evalue":"Interrupted by user","output_type":"error"}]}]}